@model ECommerceSystem.Models.StatisticViewModel

@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "_AdminLayout";
}

<div class="dashboard">
    <h2>Thống Kê</h2>
    <div class="stats">
        <select id="statType" onchange="loadStats()">
            <option value="revenue">Doanh thu</option>
            <option value="orders">Đơn hàng</option>
            <option value="top-products">Sản phẩm bán chạy</option>
        </select>
        <select id="statPeriod" onchange="loadStats()">
            <option value="day">Ngày</option>
            <option value="month">Tháng</option>
            <option value="year">Năm</option>
        </select>
        <canvas id="statsChart"></canvas>
    </div>
    <div class="inventory">
        <h3>Cảnh báo tồn kho</h3>
        @if (Model.LowStock != null && Model.LowStock.Any())
        {
            <ul>
                @foreach (var item in Model.LowStock)
                {
                    <li>@item.Name - Số lượng: @item.Stock</li>
                }
            </ul>
        }
        else
        {
            <p>Không có sản phẩm tồn kho thấp.</p>
        }
    </div>
    <div class="activity">
        <h3>Hoạt động người dùng</h3>
        @if (Model.Activities != null && Model.Activities.Any())
        {
            <ul>
                @foreach (var act in Model.Activities)
                {
                    <li>@act.UserName - @act.ActivityType: @act.Count lần (@act.Time)</li>
                }
            </ul>
        }
        else
        {
            <p>Không có hoạt động gần đây.</p>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        async function loadStats() {
            const type = document.getElementById('statType').value;
            const period = document.getElementById('statPeriod').value;
            try {
                const response = await fetch(`/api/admin/statistics?type=${type}&period=${period}`);
                if (!response.ok) {
                    console.error('Failed to load statistics:', response.status);
                    return;
                }
                const data = await response.json();
                const ctx = document.getElementById('statsChart').getContext('2d');

                // Destroy existing chart if it exists
                if (window.statsChart) {
                    window.statsChart.destroy();
                }

                window.statsChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: data.revenue?.map(r => r.date) || Object.keys(data.orderCount || {}) || data.topProducts?.map(p => p.name) || [],
                        datasets: [{
                            label: type,
                            data: data.revenue?.map(r => r.value) || Object.values(data.orderCount || {}) || data.topProducts?.map(p => p.quantity) || [],
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }
        loadStats();
    </script>
}